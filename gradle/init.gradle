allprojects { project ->

    project.afterEvaluate {
        if (project == rootProject) {
            createQuickfixFile()
            createLogFile()
            createTestsFile()
            createRootTasks()

            println "VIM log: " + this.ext.vimLogFile
            println "VIM quickfix: " + this.ext.vimQuickfixFile
            println "VIM test: " + this.ext.vimTestsFile
            println vimProperty("gradle.build.welcome", "Built with VIM Gradle Plugin")

            if (vimPropertyEnabled("gradle.enable.rtp")) {
                Eval.me(vimProperty("gradle.apply", '[]')).each {
                    vimLog("Applying " + it)
                    apply from: it
                }
            }
        }
    }
}

// {{{ VIM API

ext {
    vimTestResult = this.&vimTestResult
    vimQuickfix = this.&vimQuickfix
    vimLog = this.&vimLog
    hasVimProperty = this.&hasVimProperty
    vimPropertyEnabled = this.&vimPropertyEnabled
    vimProperty = this.&vimProperty
}

def vimLog(message) {
    ext.vimLogFile.append("$message\n")
}

def vimTestResult(message) {
    ext.vimTestsFile.append("$message\n")
}

def vimQuickfix(type, file, line, col, message) {
    if (col != null && !col.isEmpty()) {
        ext.vimQuickfixFile.append "$type: $file:$line:$col $message\n"
    } else if (line != null && !line.isEmpty()) {
        ext.vimQuickfixFile.append "$type: $file:$line $message\n"
    } else {
        ext.vimQuickfixFile.append "$type: $file $message\n"
    }
}

def hasVimProperty(propertyName) {
    return rootProject.hasProperty("vim.$propertyName")
}

def vimPropertyEnabled(propertyName) {
    return vimProperty(propertyName, "0") == "1"
}

def vimProperty(propertyName, defaultValue) {
    if (hasVimProperty(propertyName)) {
        return rootProject.property("vim.$propertyName")
    } else {
        return defaultValue
    }
}

// }}}

// {{{ Private functions

def createRootTasks() {
    rootProject.task("vimCheck") {
        doLast {
            if (vimPropertyEnabled("gradle.enable.rtp")) {
                println "VIM RTP Enabled"
                Eval.me(vimProperty("apply", '[]')).each {
                    println "Enabled vim-gradle extension script: $it"
                }
            }
            println "Ok"
        }
    }
}

def createTestsFile() {
    ext.vimTestsFile = new File(vimProperty("gradle.tests.file", ""))
}

def createQuickfixFile() {
    ext.vimQuickfixFile = new File(vimProperty("gradle.quickfix.file", ""))
    ext.vimQuickfixFile  << ""
}

def createLogFile() {
    ext.vimLogFile = new File(vimProperty("gradle.log.file", ""))
    ext.vimLogFile << ""
}

// }}}

